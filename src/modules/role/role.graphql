scalar Date
directive @isAuthenticated on FIELD_DEFINITION
directive @hasRole(roles: [String]) on FIELD_DEFINITION
directive @isOwner(type: String) on FIELD_DEFINITION
directive @rateLimit(
  max: Int
  window: String
  message: String
  identityArgs: [String]
  arrayLengthField: String
) on FIELD_DEFINITION

type Query {
  roles(filter: RoleFilter!): RoleResponse  @isAuthenticated
}

type Mutation {
  createRole(data: RoleInput!): CreateUpdateRoleResponse @isAuthenticated
  updateRole(data: RoleUpdateData!): CreateUpdateRoleResponse @isAuthenticated
  deleteRole(data: RoleDeleteData!): CreateUpdateRoleResponse @isAuthenticated
}

type Role {
  id: ID!
  title: String
  description: String
}

type RoleListing {
  id: ID!
  title: String
  description: String
}

type CreateUpdateRoleResponse {
  message: String
}

type RoleResponse {
  count: Int
  users: [RoleListing]
}


input RoleInput {
  title: String
  description: String
}

input RoleFilter {
  skip: Int
  limit: Int
  search: String
  sortBy: String
}

input RoleUpdateData {
  id: Int!
  title: String!
  description: String!
}

input RoleDeleteData {
  id: Int!
}
